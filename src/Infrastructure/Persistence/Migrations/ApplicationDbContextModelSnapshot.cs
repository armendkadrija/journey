// <auto-generated />
using System;
using Journey.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Journey.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Journey.Domain.Entities.VehiclePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Acceleration")
                        .HasColumnType("double precision")
                        .HasColumnName("acceleration");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direction");

                    b.Property<bool>("DoorStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("door_status");

                    b.Property<int>("HeadingDegree")
                        .HasColumnType("integer")
                        .HasColumnName("heading_degree");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("geography (point)")
                        .HasDefaultValue((NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT EMPTY"))
                        .HasColumnName("location");

                    b.Property<string>("LocationSource")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_source");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<int>("Occupants")
                        .HasColumnType("integer")
                        .HasColumnName("occupants");

                    b.Property<int>("Operator")
                        .HasColumnType("integer")
                        .HasColumnName("operator");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("route");

                    b.Property<string>("RouteNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("route_number");

                    b.Property<double>("Speed")
                        .HasColumnType("double precision")
                        .HasColumnName("speed");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_stamp");

                    b.Property<int>("VehicleNumber")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_number");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_positions");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("ix_vehicle_positions_latitude_longitude");

                    b.ToTable("vehicle_positions", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
